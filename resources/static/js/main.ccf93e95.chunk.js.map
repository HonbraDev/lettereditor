{"version":3,"sources":["modules/TextEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toolbar","header","color","background","script","list","indent","align","direction","TextEditor","value","onChange","quill","useRef","theme","ops","_string","_delta","source","current","editor","getContents","ref","modules","App","useState","title","insert","attributes","bold","italic","underline","blockquote","documents","setDocuments","currentDocument","setCurrentDocument","className","map","doc","index","onClick","type","newValue","documentsCopy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAKMA,EAAU,CACd,CAAC,CAAEC,OAAQ,CAAC,EAAG,GAAG,KAClB,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,CAAEC,MAAO,IAAM,CAAEC,WAAY,KAC9B,CAAC,CAAEC,OAAQ,OAAS,CAAEA,OAAQ,UAC9B,CAAC,CAAEH,OAAQ,GAAK,CAAEA,OAAQ,GAAK,aAAc,QAC7C,CAAC,CAAEI,KAAM,WAAa,CAAEA,KAAM,UAAY,CAAEC,OAAQ,MAAQ,CAAEA,OAAQ,OACtE,CAAC,CAAEC,MAAO,IAAM,CAAEC,UAAW,QAC7B,CAAC,OAAQ,QAAS,SAClB,CAAC,UAoCYC,EAjCI,SAAC,GAMb,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,SAKMC,EAAQC,iBAAmB,MAEjC,OACE,mCACE,cAAC,IAAD,CACEC,MAAM,OACNJ,MAAO,CAAEK,IAAKL,GACdC,SAAU,SAACK,EAASC,EAAQC,GAAY,IAAD,IACtB,QAAXA,GACJP,EAAQ,UACNC,EAAMO,eADA,iBACN,EAAeC,cADT,aACN,EAAuBC,cAAcN,MAGzCO,IAAKV,EACLW,QAAS,CACPvB,gBCuBKwB,EAzDH,WAAO,IAAD,EACkBC,mBAEhC,CACA,CACEC,MAAO,QACPhB,MAAO,CACL,CAAEiB,OAAQ,6BACV,CAAEC,WAAY,CAAEC,MAAM,GAAQF,OAAQ,mBACtC,CAAEA,OAAQ,aACV,CAAEC,WAAY,CAAEE,QAAQ,GAAQH,OAAQ,WACxC,CAAEA,OAAQ,mBACV,CAAEC,WAAY,CAAEG,WAAW,GAAQJ,OAAQ,YAC3C,CAAEA,OAAQ,mBACV,CAAEC,WAAY,CAAEI,YAAY,GAAQL,OAAQ,MAC5C,CAAEA,OAAQ,QAGd,CACED,MAAO,cACPhB,MAAO,CAAC,CAAEiB,OAAQ,mBApBN,mBACTM,EADS,KACEC,EADF,OAuB8BT,mBAAS,GAvBvC,mBAuBTU,EAvBS,KAuBQC,EAvBR,KA+BhB,OACE,sBAAKC,UAAU,wDAAf,UACE,qBAAIA,UAAU,0CAAd,UACGJ,EAAUK,KAAI,SAACC,EAAKC,GAAN,OACb,oBACEH,UAAS,oGACPG,IAAUL,EACN,gCACA,qBAGNM,QAAS,kBAAML,EAAmBI,IAPpC,SASGD,EAAIb,OAHAc,MAMT,uBAAOE,KAAK,YAEd,cAAC,EAAD,CACEhC,MAAOuB,EAAUE,GAAiBzB,MAClCC,SA1BW,SAACgC,GAChB,IAAMC,EAAa,YAAOX,GAC1BW,EAAcT,GAAiBzB,MAAQiC,EACvCT,EAAaU,UCnBFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ccf93e95.chunk.js","sourcesContent":["import ReactQuill, { Value } from \"react-quill\";\nimport \"quill/dist/quill.snow.css\";\nimport { useRef } from \"react\";\nimport { DeltaOperation } from \"quill\";\n\nconst toolbar = [\n  [{ header: [1, 2, false] }],\n  [\"bold\", \"italic\", \"underline\", \"strike\"],\n  [{ color: [] }, { background: [] }],\n  [{ script: \"sub\" }, { script: \"super\" }],\n  [{ header: 1 }, { header: 2 }, \"blockquote\", \"code\"],\n  [{ list: \"ordered\" }, { list: \"bullet\" }, { indent: \"-1\" }, { indent: \"+1\" }],\n  [{ align: [] }, { direction: \"ltr\" }],\n  [\"link\", \"image\", \"video\" /* , \"formula\" */],\n  [\"clean\"],\n];\n\nconst TextEditor = ({\n  value,\n  onChange,\n}: {\n  value: DeltaOperation[];\n  onChange: (newValue: DeltaOperation[]) => any;\n}) => {\n  const quill = useRef<ReactQuill>(null);\n\n  return (\n    <>\n      <ReactQuill\n        theme=\"snow\"\n        value={{ ops: value } as Value}\n        onChange={(_string, _delta, source) => {\n          if (source === \"api\") return;\n          onChange(\n            quill.current?.editor?.getContents().ops as DeltaOperation[]\n          );\n        }}\n        ref={quill}\n        modules={{\n          toolbar,\n        }}\n        /*  onChangeSelection={(selection, sources, editor) => {\n          setFormat(selection ? quill.current?.editor?.getFormat() : {});\n          console.log(selection, sources, editor);\n        }} */\n      />\n    </>\n  );\n};\n\nexport default TextEditor;\n","import { DeltaOperation } from \"quill\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport TextEditor from \"./modules/TextEditor\";\n\nconst App = () => {\n  const [documents, setDocuments] = useState<\n    { title: string; value: DeltaOperation[] }[]\n  >([\n    {\n      title: \"Hello\",\n      value: [\n        { insert: \"Hello, how are you? I am \" },\n        { attributes: { bold: true }, insert: \"under the water\" },\n        { insert: \". Please \" },\n        { attributes: { italic: true }, insert: \"help me\" },\n        { insert: \", thereâ€™s \" },\n        { attributes: { underline: true }, insert: \"too much\" },\n        { insert: \" raining!\\nWoo!\" },\n        { attributes: { blockquote: true }, insert: \"\\n\" },\n        { insert: \"\\n\" },\n      ],\n    },\n    {\n      title: \"How are you\",\n      value: [{ insert: \"How are you\" }],\n    },\n  ]);\n  const [currentDocument, setCurrentDocument] = useState(0);\n\n  const onChange = (newValue: DeltaOperation[]) => {\n    const documentsCopy = [...documents];\n    documentsCopy[currentDocument].value = newValue;\n    setDocuments(documentsCopy);\n  };\n\n  return (\n    <div className=\"App absolute top-0 left-0 h-full w-full flex flex-row\">\n      <ul className=\"flex flex-col border-r border-gray-200 \">\n        {documents.map((doc, index) => (\n          <li\n            className={`px-3 py-2 cursor-pointer overflow-ellipsis overflow-hidden whitespace-nowrap w-56 text-sm ${\n              index === currentDocument\n                ? \"bg-gray-100 hover:bg-gray-200\"\n                : \"hover:bg-gray-100\"\n            }`}\n            key={index}\n            onClick={() => setCurrentDocument(index)}\n          >\n            {doc.title}\n          </li>\n        ))}\n        <input type=\"text\" />\n      </ul>\n      <TextEditor\n        value={documents[currentDocument].value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}